// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MC1 = MauiIcons.Core;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Graphics;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.MauiIcons.Core
{
    public partial class MauiIcon : BlazorBindings.Maui.Elements.ContentView
    {
        static MauiIcon()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public uint? EntranceAnimationDuration { get; set; }
        [Parameter] public MC1.AnimationType? EntranceAnimationType { get; set; }
        [Parameter] public Enum Icon { get; set; }
        [Parameter] public Color IconAndSuffixBackgroundColor { get; set; }
        [Parameter] public bool? IconAutoScaling { get; set; }
        [Parameter] public Color IconBackgroundColor { get; set; }
        [Parameter] public Color IconColor { get; set; }
        [Parameter] public double? IconSize { get; set; }
        [Parameter] public string IconSuffix { get; set; }
        [Parameter] public bool? IconSuffixAutoScaling { get; set; }
        [Parameter] public Color IconSuffixBackgroundColor { get; set; }
        [Parameter] public string IconSuffixFontFamily { get; set; }
        [Parameter] public double? IconSuffixFontSize { get; set; }
        [Parameter] public Color IconSuffixTextColor { get; set; }
        [Parameter] public uint? OnClickAnimationDuration { get; set; }
        [Parameter] public MC1.AnimationType? OnClickAnimationType { get; set; }
        [Parameter] public string OnIdioms { get; set; }
        [Parameter] public string OnPlatforms { get; set; }

        public new MC1.MauiIcon NativeControl => (MC1.MauiIcon)((BindableObject)this).NativeControl;

        protected override MC1.MauiIcon CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(EntranceAnimationDuration):
                    if (!Equals(EntranceAnimationDuration, value))
                    {
                        EntranceAnimationDuration = (uint?)value;
                        NativeControl.EntranceAnimationDuration = EntranceAnimationDuration ?? (uint)MC1.MauiIcon.EntranceAnimationDurationProperty.DefaultValue;
                    }
                    break;
                case nameof(EntranceAnimationType):
                    if (!Equals(EntranceAnimationType, value))
                    {
                        EntranceAnimationType = (MC1.AnimationType?)value;
                        NativeControl.EntranceAnimationType = EntranceAnimationType ?? (MC1.AnimationType)MC1.MauiIcon.EntranceAnimationTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(Icon):
                    if (!Equals(Icon, value))
                    {
                        Icon = (Enum)value;
                        NativeControl.Icon = Icon;
                    }
                    break;
                case nameof(IconAndSuffixBackgroundColor):
                    if (!Equals(IconAndSuffixBackgroundColor, value))
                    {
                        IconAndSuffixBackgroundColor = (Color)value;
                        NativeControl.IconAndSuffixBackgroundColor = IconAndSuffixBackgroundColor;
                    }
                    break;
                case nameof(IconAutoScaling):
                    if (!Equals(IconAutoScaling, value))
                    {
                        IconAutoScaling = (bool?)value;
                        NativeControl.IconAutoScaling = IconAutoScaling ?? (bool)MC1.MauiIcon.IconAutoScalingProperty.DefaultValue;
                    }
                    break;
                case nameof(IconBackgroundColor):
                    if (!Equals(IconBackgroundColor, value))
                    {
                        IconBackgroundColor = (Color)value;
                        NativeControl.IconBackgroundColor = IconBackgroundColor;
                    }
                    break;
                case nameof(IconColor):
                    if (!Equals(IconColor, value))
                    {
                        IconColor = (Color)value;
                        NativeControl.IconColor = IconColor;
                    }
                    break;
                case nameof(IconSize):
                    if (!Equals(IconSize, value))
                    {
                        IconSize = (double?)value;
                        NativeControl.IconSize = IconSize ?? (double)MC1.MauiIcon.IconSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(IconSuffix):
                    if (!Equals(IconSuffix, value))
                    {
                        IconSuffix = (string)value;
                        NativeControl.IconSuffix = IconSuffix;
                    }
                    break;
                case nameof(IconSuffixAutoScaling):
                    if (!Equals(IconSuffixAutoScaling, value))
                    {
                        IconSuffixAutoScaling = (bool?)value;
                        NativeControl.IconSuffixAutoScaling = IconSuffixAutoScaling ?? (bool)MC1.MauiIcon.IconSuffixAutoScalingProperty.DefaultValue;
                    }
                    break;
                case nameof(IconSuffixBackgroundColor):
                    if (!Equals(IconSuffixBackgroundColor, value))
                    {
                        IconSuffixBackgroundColor = (Color)value;
                        NativeControl.IconSuffixBackgroundColor = IconSuffixBackgroundColor;
                    }
                    break;
                case nameof(IconSuffixFontFamily):
                    if (!Equals(IconSuffixFontFamily, value))
                    {
                        IconSuffixFontFamily = (string)value;
                        NativeControl.IconSuffixFontFamily = IconSuffixFontFamily;
                    }
                    break;
                case nameof(IconSuffixFontSize):
                    if (!Equals(IconSuffixFontSize, value))
                    {
                        IconSuffixFontSize = (double?)value;
                        NativeControl.IconSuffixFontSize = IconSuffixFontSize ?? (double)MC1.MauiIcon.IconSuffixFontSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(IconSuffixTextColor):
                    if (!Equals(IconSuffixTextColor, value))
                    {
                        IconSuffixTextColor = (Color)value;
                        NativeControl.IconSuffixTextColor = IconSuffixTextColor;
                    }
                    break;
                case nameof(OnClickAnimationDuration):
                    if (!Equals(OnClickAnimationDuration, value))
                    {
                        OnClickAnimationDuration = (uint?)value;
                        NativeControl.OnClickAnimationDuration = OnClickAnimationDuration ?? (uint)MC1.MauiIcon.OnClickAnimationDurationProperty.DefaultValue;
                    }
                    break;
                case nameof(OnClickAnimationType):
                    if (!Equals(OnClickAnimationType, value))
                    {
                        OnClickAnimationType = (MC1.AnimationType?)value;
                        NativeControl.OnClickAnimationType = OnClickAnimationType ?? (MC1.AnimationType)MC1.MauiIcon.OnClickAnimationTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(OnIdioms):
                    if (!Equals(OnIdioms, value))
                    {
                        OnIdioms = (string)value;
                        NativeControl.OnIdioms = AttributeHelper.GetStringList(OnIdioms);
                    }
                    break;
                case nameof(OnPlatforms):
                    if (!Equals(OnPlatforms, value))
                    {
                        OnPlatforms = (string)value;
                        NativeControl.OnPlatforms = AttributeHelper.GetStringList(OnPlatforms);
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
